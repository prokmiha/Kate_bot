import logging
import asyncio
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.utils.exceptions import NetworkError
from constant import BOT_TOKEN, CARD_1, CARD_2

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤
bot_token = BOT_TOKEN
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

user_data = {}
unic_users = []
none_counter = 1


async def start_bot():
	while True:
		try:
			await dp.start_polling(reset_webhook=True)
		except NetworkError:
			logging.error('Network error occurred. Restarting bot...')
			await asyncio.sleep(5)

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
	keyboard.add(types.KeyboardButton(text='–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è'))
	keyboard.add(types.KeyboardButton(text='–ü—Ä–∏–¥–±–∞—Ç–∏'))

	user_id = message.from_user.id
	first_name = message.from_user.first_name
	last_name = message.from_user.last_name
	username = message.from_user.username

	global none_counter
	if not username:
		username = "None_" + str(none_counter)
		none_counter += 1
	if username not in user_data:
		user_data[username] = {
			'user_id': user_id,
			'first_name': first_name,
			'last_name': last_name,
			'username': username
		}

	print(user_id, first_name, last_name, username)

	await message.answer(
		"–ü—Ä–∏–≤—ñ—Ç ü´∂üèº\n\n–î—è–∫—É—é –∑–∞ —Ç–≤–æ—é —Ü—ñ–∫–∞–≤—ñ—Å—Ç—å –¥–æ –º–æ—î—ó –ø–µ—Ä—à–æ—ó –∑–±—ñ—Ä–∫–∏ –≤—ñ—Ä—à—ñ–≤ <i><b>¬´—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è¬ª</b></i>.",
		reply_markup=keyboard, parse_mode='HTML')
	await message.answer("–ü–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –ø—Ä–∏–¥–±–∞—Ç–∏ —ó—ó, –æ–∑–Ω–∞–π–æ–º—Å—è, –±—É–¥—å-–ª–∞—Å–∫–∞, –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è')
async def process_training(message: types.Message):
	await message.answer(
		"""–ó–±—ñ—Ä–∫—É  —è –Ω–∞–¥—ñ—à–ª—é —Ç–æ–±—ñ  –æ—Å–æ–±–∏—Å—Ç–æ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –∞–±–æ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º."
		–ù–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–¥–±–∞—Ç–∏¬ª —Ç–∏ –∑–Ω–∞–π–¥–µ—à –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ä–µ–∫—ñ–∑–∏—Ç–∏.
		<b>–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –±—É–¥—å-–ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó –Ω–∞ –ø–æ—à—Ç—É –∞–±–æ –º–µ–Ω—ñ —É –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b> ‚ú®""",
		parse_mode='HTML')
	await message.answer(
		"–Ø–∫—â–æ —É —Ç–µ–±–µ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Å–∫–ª–∞–¥–Ω–æ—â—ñ, —Ç–∞–∫–æ–∂ –Ω–µ —Å–æ—Ä–æ–º—Å—è –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω–µ —É –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ü•∞")


@dp.message_handler(lambda message: message.text == '–ü—Ä–∏–¥–±–∞—Ç–∏')
async def process_purchase(message: types.Message):
	keyboard_hide = types.ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

	await message.answer(
		"""<i>–ö–æ–∂–µ–Ω –º–Ω–æ—é –Ω–∞–ø–∏—Å–∞–Ω–∏–π —Ç–≤—ñ—Ä –Ω–µ—Å–µ –≤ —Å–æ–±—ñ –≤–∞–∂–ª–∏–≤—ñ –ø–æ—Å–ª–∞–Ω–Ω—è.
	–°–ø–æ–¥—ñ–≤–∞—é—Å—å, —â–æ –∑ –Ω–∏–º–∏ —Ç–∏ –≤—ñ–¥–Ω–∞–π–¥–µ—à –∫–ª–∞–ø—Ç–∏–∫ –≤—ñ—Ä–∏, –∂–º–µ–Ω—é –Ω–∞–¥—ñ—ó —ñ –¥–≤—ñ—Å—Ç—ñ –ø º—è—Ç–¥–µ—Å—è—Ç –≥—Ä–∞–º—ñ–≤ —Ç–µ–ø–ª–∞, —â–æ –ø—Ä–∏–≤–µ–¥—É—Ç—å —Ç–µ–±–µ –¥–æ —Å–ø–æ–∫–æ—é —ñ –ª—é–±–æ–≤—ñ‚ù§Ô∏è</i>""",
		reply_markup=keyboard_hide, parse_mode="HTML")
	await message.answer(f'''–í–∞—Ä—Ç—ñ—Å—Ç—å –∑–±—ñ—Ä–∫–∏: 600 –≥—Ä–Ω. 
–û–ø–ª–∞—Ç–∏—Ç–∏ –º–æ–∂–Ω–∞ –¥–≤–æ–º–∞ —Å–ø–æ—Å–æ–±–∞–º–∏: 

<b>‚Ä¢ –ö–∞—Ä—Ç–∞ –º–æ–Ω–æ–±–∞–Ω–∫:</b>

<code>{CARD_1}
–ö–∞—Ç–µ—Ä–∏–Ω–∞ –í–æ–π–Ω–∞</code> 

<b>‚Ä¢ –Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫:</b> 

<code>{CARD_2}
Kateryna Voina 
–°—É–º–∞: 15‚Ç¨</code>''', parse_mode="HTML")

	keyboard = types.InlineKeyboardMarkup()
	email_button = types.InlineKeyboardButton(text='–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞', callback_data='copy_email')
	chat_button = types.InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ', url='https://t.me/kate_voina')
	keyboard.add(email_button, chat_button)

	message_text = """–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª–∏ –±—É–¥—å-–ª–∞—Å–∫–∞ —Å–∫—Ä—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑—Ä—É—á–Ω–∏–º –¥–ª—è —Ç–µ–±–µ —Å–ø–æ—Å–æ–±–æ–º ‚Äî –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.

–Ü –Ω–µ –∑–∞–±—É–≤–∞–π: —Ç–∏ ‚Äî –º–∞–≥—ñ—è. 

–û–±—ñ–π–º–∞—é ‚ú®"""
	await message.answer(message_text, reply_markup=keyboard)


@dp.callback_query_handler(lambda query: query.data == 'copy_email')
async def copy_email_handler(query: types.CallbackQuery):
	email = 'regenerationpoetry@gmail.com'

	if query.from_user.is_bot:
		await query.answer("–ö–ª–∞—Ü–Ω—É–≤ –±–æ—Ç, –∞ —Ü–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
	else:
		await bot.send_message(chat_id=query.from_user.id, text=f"–ê–¥—Ä–µ—Å–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏: {email}")


async def write_names_to_file():
	while True:
		await asyncio.sleep(1800)

		now = datetime.now()
		formatted_time = now.strftime('%Y-%m-%d %H:%M:%S')
		file_name = 'user_names.txt'

		with open(file_name, 'a', encoding="UTF-8") as file:
			# –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω—ã–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
			for username, user_info in user_data.items():
				user_id = user_info['user_id']
				first_name = user_info['first_name']
				last_name = user_info['last_name']
				username = user_info['username']

				if username not in unic_users:
					unic_users.append(username)
					print(unic_users)
					file.write(
						f'{formatted_time}: ID: {user_id}, Name: {first_name}, Surname: {last_name}, Username: {username}\n'
					)


@dp.message_handler()
async def echo(message: types.Message):
	if message.from_user.is_bot:
		return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
	if message.text == '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞':
		command_message = types.Message(
			message_id=message.message_id,
			chat=message.chat,
			from_user=message.from_user,
			text='/start'
		)
		await start_command(command_message)
	else:
		await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


if __name__ == '__main__':
	loop = asyncio.get_event_loop()
	try:
		loop.create_task(write_names_to_file())
		loop.create_task(start_bot())
		loop.run_forever()
	finally:
		loop.run_until_complete(storage.close())
		loop.run_until_complete(storage.wait_closed())
		loop.close()
